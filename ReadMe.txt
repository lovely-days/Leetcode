
1.两数之和
    my Solution
        使用双层循环对数组内各元素逐对进行尝试
            时间复杂度为 O(n*n),空间复杂度为 O(1)
    
    top Solutin
        使用散列表替代内层循环匹配，随循环将未命中元素逐一添加至散列表
            时间复杂度降为 O(n*1),利用额外散列表空间，最坏可达到 O(n)


2.两数相加
    my solution NewNode
        创建新链表存储计算后数值，输入链表不被破坏
        在运算中依次对两链表重合部分 (min(m,n)),剩余链表部分进行处理，使用数值变量标识进位
        时间复杂度为 O(max(m,n)),空间复杂度为 O(max(m,n))

    my solution ExistNode
        直接使用函数第一个链表参数储存计算后数值，输入链表被破坏
        运算方法同上
        时间复杂度为 O(max(m,n)),空间复杂度为 O(1)

    top solution
        采用迭代方法解决，实现简洁，空间开销极大
        两数值相加和进位操作分离，在迭代相加返回时进行进位
        时间复杂度为 O(max(m,n)),空间复杂度为 O(max(m.n)) (新建链表) (此外有较大栈空间开支)

##  注意：
        在算法中应首先判断输入两链表是否为空，为空应直接返回

19.删除链表的倒数第 n 个结点
    my solution
        采用两个相隔 n 个结点的指针，从左至右逐个遍历，
        当右侧指针到达链表尾部时，左侧指针指向链表倒数第 n+1 个结点，从而删除链表倒数第 n 个结点
        时间复杂度为 O(n),空间复杂度为 O(1)
    
    top solution
        与 my solution 基本一致

##  注意：
        对于无头结点链表删除添加等操作，可以构建头结点以实现其操作统一
        对于两个链表指针命名可以采用 fast slow 
